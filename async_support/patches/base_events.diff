--- base_events_original.py	2024-10-07 10:26:48.000000000 +0800
+++ base_events_patched.py	2025-03-18 01:00:23.045485200 +0800
@@ -2050,3 +2050,48 @@
 
         if self.is_running():
             self.call_soon_threadsafe(self._set_coroutine_origin_tracking, enabled)
+
+    def poll_events(self):
+        """轮询I/O事件但不处理它们"""
+        # 计算超时时间 - 保留动态超时计算
+        timeout = None
+        if self._ready or self._stopping:
+            timeout = 0
+        elif self._scheduled:
+            # 计算所需的超时时间
+            timeout = self._scheduled[0]._when - self.time()
+            if timeout > MAXIMUM_SELECT_TIMEOUT:
+                timeout = MAXIMUM_SELECT_TIMEOUT
+            elif timeout < 0:
+                timeout = 0
+
+        # 执行实际的轮询操作
+        try:
+            return self._selector.select(timeout)
+        except:
+            return []
+
+    def process_events(self, events):
+        """处理轮询到的I/O事件"""
+        if events:
+            self._process_events(events)
+
+    def process_ready(self):
+        """处理到期的定时器和执行就绪的回调"""
+        # 处理已过期的计时器
+        end_time = self.time() + self._clock_resolution
+        while self._scheduled:
+            handle = self._scheduled[0]
+            if handle._when >= end_time:
+                break
+            handle = heapq.heappop(self._scheduled)
+            handle._scheduled = False
+            if not handle._cancelled:
+                self._ready.append(handle)
+        
+        # 执行就绪的回调
+        ntodo = len(self._ready)
+        for i in range(ntodo):
+            handle = self._ready.popleft()
+            if not handle._cancelled:
+                handle._run()
